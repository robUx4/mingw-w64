/**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */

#ifdef __WIDL__
#pragma winrt ns_prefix
#endif

import "inspectable.idl";
import "windows.foundation.idl";

namespace Windows {
  //~ namespace Foundation {
    //~ struct DateTime;
  //~ }
  namespace Storage {
    namespace Streams {
      interface IBufferFactory;
      interface IBuffer;
      interface IRandomAccessStreamReference;
      interface IInputStreamReference;
      interface IInputStream;
      interface IOutputStream;
      interface IRandomAccessStream;
      interface IDataReader;
      interface IDataReaderFactory;
      enum ByteOrder;
      enum InputStreamOptions;
      enum UnicodeEncoding;

      interface IAsyncOperation_IRandomAccessStreamWithContentType; // IAsyncOperation<IRandomAccessStreamWithContentType*>
      interface IAsyncOperationCompletedHandler_IRandomAccessStreamWithContentType; // delegate  AsyncOperationCompletedHandler<IRandomAccessStreamWithContentType*>

      interface IAsyncOperation_UINT32; // IAsyncOperation<UINT32>
      interface IAsyncOperationCompletedHandler_UINT32; // delegate  AsyncOperationCompletedHandler<UINT32>

      interface IAsyncOperationWithProgress_IBuffer_UINT32; // IAsyncOperationWithProgress<IBuffer*, UINT32>
    }
  }
}

namespace Windows {
  namespace Storage {
    namespace Streams {
      typedef enum InputStreamOptions {
        None = 0x0,
        Partial = 0x1,
        ReadAhead = 0x2
      } InputStreamOptions;

      typedef enum ByteOrder {
        LittleEndian,
        BigEndian
      } ByteOrder;

      typedef enum UnicodeEncoding {
        Utf8,
        Utf16LE,
        Utf16BE
      } UnicodeEncoding;

      [uuid(905A0FE0-BC53-11DF-8C49-001E4FC686DA)]
      interface IBuffer : IInspectable {
        [propget] HRESULT Capacity(UINT32* value);
        [propget] HRESULT Length(UINT32* value);
        [propput] HRESULT Length(UINT32 value);
      }

      [uuid(71AF914D-C10F-484B-BC50-14BC623B3A27)]
      interface IBufferFactory : IInspectable {
        HRESULT Create(UINT32 capacity, IBuffer** value);
      }

      [uuid(CC254827-4B3D-438F-9232-10C76BC7E038)]
      interface IRandomAccessStreamWithContentType : IInspectable {
        void Dispose();
      }

      [uuid(33EE3134-1DD6-4E3A-8067-D1C162E8642B)]
      interface IRandomAccessStreamReference : IInspectable
      {
          HRESULT OpenReadAsync(IAsyncOperation_IRandomAccessStreamWithContentType** operation);
      }

      [uuid(3DDDECF4-1D39-58E8-83B1-DBED541C7F35)]
      interface IAsyncOperationCompletedHandler_IRandomAccessStreamWithContentType : IUnknown {
        HRESULT Invoke(IRandomAccessStreamWithContentType* asyncInfo, Windows.Foundation.AsyncStatus asyncStatus);
      }

      [uuid("e521c894-2c26-5946-9e61-2b5e188d01ed")]
      interface IAsyncOperation_IRandomAccessStreamWithContentType : IInspectable 
      // also IAsyncInfo
      {
        [propput] HRESULT Completed(IAsyncOperationCompletedHandler_IRandomAccessStreamWithContentType* handler);
        [propget] HRESULT Completed(IAsyncOperationCompletedHandler_IRandomAccessStreamWithContentType** handler);
        HRESULT GetResults(IRandomAccessStreamWithContentType** result);
      }

      [uuid("e521c894-2c26-5946-9e61-2b5e188d01ed")]
      interface IAsyncOperationWithProgress_IBuffer_UINT32 : IInspectable 
      // also IAsyncInfo
      {
        [propput] HRESULT Completed(IAsyncOperationCompletedHandler_IRandomAccessStreamWithContentType* handler);
        [propget] HRESULT Completed(IAsyncOperationCompletedHandler_IRandomAccessStreamWithContentType** handler);
        [propget] HRESULT Progress(IAsyncOperationCompletedHandler_IRandomAccessStreamWithContentType** handler);
        HRESULT GetResults(IRandomAccessStreamWithContentType** result);
      }

      [uuid(43929D18-5EC9-4B5A-919C-4205B0C804B6)]
      interface IInputStreamReference : IInspectable
      {
          HRESULT OpenSequentialReadAsync(/*IAsyncOperation<IInputStream*>*/IInspectable** operation);
      }

      [uuid(905A0FE2-BC53-11DF-8C49-001E4FC686DA)]
      interface IInputStream : IInspectable
      // also IClosable
      {
          HRESULT ReadAsync(IBuffer* buffer, UINT32 count, InputStreamOptions options, IAsyncOperationWithProgress_IBuffer_UINT32** operation);
      }

      [uuid(905A0FE6-BC53-11DF-8C49-001E4FC686DA)]
      interface IOutputStream : IInspectable
      // also IClosable
      {
          HRESULT WriteAsync(IBuffer* buffer, /*Foundation.IAsyncOperationWithProgress<UINT32, UINT32>*/IInspectable** operation);
          HRESULT FlushAsync(/*IAsyncOperation<boolean>*/IInspectable** operation);
      }

      [uuid(905A0FE1-BC53-11DF-8C49-001E4FC686DA)]
      interface IRandomAccessStream : IInspectable
      // also IClosable, IInputStream, IOutputStream
      {
          [propget] HRESULT Size(UINT64* value);
          [propput] HRESULT Size(UINT64 value);
          HRESULT GetInputStreamAt(UINT64 position, IInputStream** stream);
          HRESULT GetOutputStreamAt(UINT64 position, IOutputStream** stream);
          [propget] HRESULT Position(UINT64* value);
          HRESULT Seek(UINT64 position);
          HRESULT CloneStream(IRandomAccessStream** stream);
          [propget] HRESULT CanRead(boolean* value);
          [propget] HRESULT CanWrite(boolean* value);
      }

      [uuid(11FCBFC8-F93A-471B-B121-F379E349313C)]
      interface IDataReaderStatics : IInspectable
      {
          HRESULT FromBuffer(IBuffer* buffer, IDataReader** dataReader);
      }

      [uuid(9343B6E7-E3D2-5E4A-AB2D-2BCE4919A6A4)]
      interface IAsyncOperationCompletedHandler_UINT32 : IUnknown {
        HRESULT Invoke(UINT32* asyncInfo, Windows.Foundation.AsyncStatus asyncStatus);
      }

      []
      interface IAsyncOperation_UINT32 : IInspectable
      // also IAsyncInfo
      {
        [propput] HRESULT Completed(IAsyncOperationCompletedHandler_UINT32* handler);
        [propget] HRESULT Completed(IAsyncOperationCompletedHandler_UINT32** handler);
        HRESULT GetResults(UINT32* result);
      }

      []
      interface DataReaderLoadOperation : IAsyncOperation_UINT32
      {
      }

      [uuid(E2B50029-B4C1-4314-A4B8-FB813A2F275E)]
      interface IDataReader : IInspectable
      {
          [propget] HRESULT UnconsumedBufferLength(UINT32* value);
          [propget] HRESULT UnicodeEncoding(UnicodeEncoding* value);
          [propput] HRESULT UnicodeEncoding(UnicodeEncoding value);
          [propget] HRESULT ByteOrder(ByteOrder* value);
          [propput] HRESULT ByteOrder(ByteOrder value);
          [propget] HRESULT InputStreamOptions(InputStreamOptions* value);
          [propput] HRESULT InputStreamOptions(InputStreamOptions value);
          HRESULT ReadByte(BYTE* value);
          HRESULT ReadBytes(UINT32 valueSize, BYTE* value);
          HRESULT ReadBuffer(UINT32 length, IBuffer** buffer);
          HRESULT ReadBoolean(boolean* value);
          HRESULT ReadGuid(GUID* value);
          HRESULT ReadInt16(INT16* value);
          HRESULT ReadInt32(INT32* value);
          HRESULT ReadInt64(INT64* value);
          HRESULT ReadUInt16(UINT16* value);
          HRESULT ReadUInt32(UINT32* value);
          HRESULT ReadUInt64(UINT64* value);
          HRESULT ReadSingle(FLOAT* value);
          HRESULT ReadDouble(DOUBLE* value);
          HRESULT ReadString(UINT32 codeUnitCount, HSTRING* value);
          HRESULT ReadDateTime(/*DateTime* */ UINT64* value);
          HRESULT ReadTimeSpan(/*TimeSpan* */ UINT64* value);
          HRESULT LoadAsync(UINT32 count, IAsyncOperation_UINT32** operation);
          HRESULT DetachBuffer(IBuffer** buffer);
          HRESULT DetachStream(IInputStream** stream);
      }

      [uuid(d7527847-57da-4e15-914c-06806699a098)]
      interface IDataReaderFactory : IInspectable
      {
          HRESULT CreateDataReader(IInputStream* inputStream, IDataReader** dataReader);
      }
    }
  }
}
