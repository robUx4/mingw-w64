/**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */

#ifdef __WIDL__
#pragma winrt ns_prefix
#endif

cpp_quote("#ifdef __cplusplus")
cpp_quote("} /* extern \"C\" */")
cpp_quote("// metafunctions for handling Interface Groups and Runtime Types in parameterized interfaces")
cpp_quote("namespace ABI {")
cpp_quote("namespace Windows { namespace Foundation { namespace Internal")
cpp_quote("{")
cpp_quote("    // LogicalType - the Windows Runtime type (eg, runtime class, inteface group, etc)")
cpp_quote("    //               being provided as an argument to an _impl template, when that type")
cpp_quote("    //               cannot be represented at the ABI.")
cpp_quote("    // AbiType     - the type used for marshalling, ie \"at the ABI\", for the logical type.")
cpp_quote("    template <class LogicalType, class AbiType>")
cpp_quote("    struct AggregateType")
cpp_quote("    {};")
cpp_quote("")
cpp_quote("    // Gets the ABI type.  See AggregateType for description.")
cpp_quote("    template <class T>")
cpp_quote("    struct GetAbiType")
cpp_quote("    {")
cpp_quote("        typedef T type;")
cpp_quote("    };")
cpp_quote("")
cpp_quote("    template <class L, class A>")
cpp_quote("    struct GetAbiType<AggregateType<L, A> >")
cpp_quote("    {")
cpp_quote("        typedef A type;")
cpp_quote("    };")
cpp_quote("")
cpp_quote("    // Gets the LogicalType.  See AggregateType for description.")
cpp_quote("    template <class T>")
cpp_quote("    struct GetLogicalType ")
cpp_quote("    {")
cpp_quote("        typedef T type; ")
cpp_quote("    };")
cpp_quote("")
cpp_quote("    template <class L, class A>")
cpp_quote("    struct GetLogicalType<AggregateType<L, A> >")
cpp_quote("    {")
cpp_quote("        typedef L type;")
cpp_quote("    };")
cpp_quote("")
cpp_quote("}}} // namespace Windows::Foundation::Internal")
cpp_quote("} // ABI")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // __cplusplus")
cpp_quote("")

import "inspectable.idl";

// found in eventtoken.h in MSDK
typedef struct EventRegistrationToken {
  UINT64 Value;
} EventRegistrationToken;

// found in asyncinfo.h in MSDK
typedef [v1_enum] enum AsyncStatus {
  Started,
  Completed,
  Canceled,
  Error
} AsyncStatus;

namespace Windows {
  namespace Foundation {
    interface IAsyncInfo;
    interface IAsyncAction;
    interface IAsyncOperation<TResult>;
    struct    DateTime;

    namespace Collections {
      interface IPropertySet;
    }
  }
}

namespace Windows {
  namespace Foundation {
    struct DateTime {
      UINT64 UniversalTime;
    };

    struct TimeSpan {
      INT64 Duration;
    };

    [uuid(00000036-0000-0000-C000-000000000046)]
    interface IAsyncInfo : IInspectable
    {
      [propget] HRESULT Id(unsigned int *id);
      [propget] HRESULT Status(AsyncStatus *status);
      [propget] HRESULT ErrorCode(HRESULT *errorCode);
      HRESULT Cancel();
      HRESULT Close();
    }

    [uuid(a4ed5c81-76c9-40bd-8be6-b1d90fb20ae7)]
    delegate HRESULT AsyncActionCompletedHandler(IAsyncAction *asyncAction, AsyncStatus status);

    [uuid(5a648006-843a-4da9-865b-9d26e5dfad7b)]
    interface IASyncAction : IAsyncInfo {
      [propput] HRESULT Completed(AsyncActionCompletedHandler* handler);
      [propget] HRESULT Completed(AsyncActionCompletedHandler** handler);
      HRESULT GetResults();
    }

#ifdef __WIDL__
        [
            uuid(fcdcf02c-e5d8-4478-915a-4d90b74b83a5)
        ]
        delegate HRESULT AsyncOperationCompletedHandler<TResult>(Windows.Foundation.IAsyncOperation<TResult> *asyncInfo, AsyncStatus asyncStatus);

        [uuid("9fc2b0bb-e446-44e2-aa61-9cab8f636af2")]
        interface IAsyncOperation<TResult> : IInspectable {
            [propput] HRESULT Completed(AsyncOperationCompletedHandler<TResult>* handler);
            [propget] HRESULT Completed(AsyncOperationCompletedHandler<TResult>** handler);
            HRESULT GetResults(TResult* result);
        }

        [
            uuid(9de1c535-6ae1-11e0-84e1-18a905bcc53f)
        ]
        delegate HRESULT EventHandler<TResult>([in] IInspectable *sender, [in] TResult args);

        [
            uuid(9de1c534-6ae1-11e0-84e1-18a905bcc53f)
        ]
        // parameter order seems inverted for TypedEventHandler<DeviceWatcher*, DeviceInformation*>
        delegate HRESULT TypedEventHandler<TSender,TArgs>(TSender sender, TArgs args);

        namespace Collections
        {
            [
                uuid(6a79e863-4300-459a-9966-cbb660963ee1)
            ]
            interface IIterator<TResult> : IInspectable
            {
                [propget] HRESULT Current([out, retval] TResult *value);
                [propget] HRESULT HasCurrent([out, retval] BOOL *value);
                HRESULT MoveNext([out, retval] BOOL *value);
                HRESULT GetMany([in] UINT32 count, [out] TResult *items, [out, retval] UINT32 *value);
            }

            [
                uuid(faa585ea-6214-4217-afda-7f46de5869b3)
            ]
            interface IIterable<TResult> : IInspectable
            {
                HRESULT First([out, retval] Windows.Foundation.Collections.IIterator<TResult> **value);
            }

            [
                uuid(bbe1fa4c-b0e3-4583-baef-1f1b2e483e56)
            ]
            interface IVectorView<TResult> : IInspectable
            {
                HRESULT GetAt([in] UINT32 index, [out, retval] TResult *value);
                [propget] HRESULT Size([out, retval] UINT32 *value);
                HRESULT IndexOf([in, optional] TResult element, [out] UINT32 *index, [out, retval] BOOLEAN *value);
                HRESULT GetMany([in] UINT32 start_index, [in] UINT32 itemsLength, [out] TResult **items, [out, retval] UINT32 *value);
            }
        }
#endif
  }
}

namespace Windows {
    namespace Foundation {
        declare {
            interface Windows.Foundation.Collections.IVectorView<HSTRING>;

            interface Windows.Foundation.Collections.IIterable<HSTRING>;
            interface Windows.Foundation.Collections.IIterator<HSTRING>;

            interface Windows.Foundation.IAsyncOperation<UINT32>;
            interface Windows.Foundation.AsyncOperationCompletedHandler<UINT32>;
        }
    }
}
