/**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */

#ifdef __WIDL__
#pragma winrt ns_prefix
#endif

import "inspectable.idl";

cpp_quote("#if 0 // widl-only definitions already defined in Windows headers")
typedef struct EventRegistrationToken {
  UINT64 Value;
} EventRegistrationToken;

typedef enum AsyncStatus {
  Started,
  Completed,
  Canceled,
  Error
} AsyncStatus;
cpp_quote("#endif // widl-only definitions")

namespace Windows {
  namespace Foundation {
    interface IAsyncInfo;
    interface IAsyncAction;
    interface IAsyncOperation<T>;
    struct    DateTime;

    namespace Collections {
      interface IPropertySet;
    }
  }
}

namespace Windows {
  namespace Foundation {
    struct DateTime {
      UINT64 UniversalTime;
    };

    struct TimeSpan {
      INT64 Duration;
    };

    [uuid(00000036-0000-0000-C000-000000000046)]
    interface IAsyncInfo : IInspectable
    {
      [propget] HRESULT Id(unsigned int *id);
      [propget] HRESULT Status(AsyncStatus *status);
      [propget] HRESULT ErrorCode(HRESULT *errorCode);
      HRESULT Cancel();
      HRESULT Close();
    }

    [uuid(A4ED5C81-76C9-40BD-8BE6-B1D90FB20AE7)]
    delegate HRESULT AsyncActionCompletedHandler(IAsyncAction *asyncAction, AsyncStatus status);

    [uuid(5A648006-843A-4DA9-865B-9D26E5DFAD7B)]
    interface IASyncAction : IAsyncInfo {
      [propput] HRESULT Completed(AsyncActionCompletedHandler* handler);
      [propget] HRESULT Completed(AsyncActionCompletedHandler** handler);
      HRESULT GetResults();
    }

#ifdef __WIDL__
        [
            uuid("FCDCF02C-E5D8-4478-915A-4D90B74B83A5")
        ]
        delegate HRESULT AsyncOperationCompletedHandler<T>(Windows.Foundation.IAsyncOperation<T> *asyncInfo, AsyncStatus asyncStatus);

        [uuid("9fc2b0bb-e446-44e2-aa61-9cab8f636af2")]
        interface IAsyncOperation<T> : IAsyncInfo {
            [propput] HRESULT Completed(AsyncOperationCompletedHandler<T>* handler);
            [propget] HRESULT Completed(AsyncOperationCompletedHandler<T>** handler);
            HRESULT GetResults(T* result);
        }

        [
            uuid(9de1c535-6ae1-11e0-84e1-18a905bcc53f)
        ]
        delegate HRESULT EventHandler<T>([in] IInspectable *sender, [in] T args);

        [
            uuid(9DE1C534-6AE1-11E0-84E1-18A905BCC53F)
        ]
        delegate HRESULT TypedEventHandler<TSender,TResult>(TSender sender, TResult args);

        namespace Collections
        {
            [
                uuid(6a79e863-4300-459a-9966-cbb660963ee1)
            ]
            interface IIterator<T> : IInspectable
            {
                [propget] HRESULT Current([out, retval] T *value);
                [propget] HRESULT HasCurrent([out, retval] BOOL *value);
                HRESULT MoveNext([out, retval] BOOL *value);
                HRESULT GetMany([in] UINT32 count, [out] T *items, [out, retval] UINT32 *value);
            }

            [
                uuid(faa585ea-6214-4217-afda-7f46de5869b3)
            ]
            interface IIterable<T> : IInspectable
            {
                HRESULT First([out, retval] Windows.Foundation.Collections.IIterator<T> **value);
            }

            [
                uuid(bbe1fa4c-b0e3-4583-baef-1f1b2e483e56)
            ]
            interface IVectorView<T> : IInspectable
            {
                HRESULT GetAt([in] ULONG index, [out, retval] T *value);
                [propget] HRESULT Size([out, retval] ULONG *value);
                HRESULT IndexOf([in, optional] T element, [out] ULONG *index, [out, retval] BOOLEAN *value);
                HRESULT GetMany([in] ULONG start_index, [out] T *items, [out, retval] ULONG *value);
            }
        }
#endif
  }
}

namespace Windows {
    namespace Foundation {
        declare {
            interface Windows.Foundation.Collections.IVectorView<HSTRING>;

            interface Windows.Foundation.Collections.IIterable<HSTRING>;
            interface Windows.Foundation.Collections.IIterator<HSTRING>;

            interface Windows.Foundation.IAsyncOperation<UINT32>;
            interface Windows.Foundation.AsyncOperationCompletedHandler<UINT32>;
        }
    }
}
