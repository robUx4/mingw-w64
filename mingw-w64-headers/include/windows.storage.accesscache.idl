/**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */

#ifdef __WIDL__
#pragma winrt ns_prefix
#endif

import "inspectable.idl";
import "windows.foundation.idl";
import "windows.storage.idl";

namespace Windows {
  namespace Foundation {
    interface TypedEventHandler;       // delegate
  }
  namespace Storage {
    interface IStorageItem;

    namespace AccessCache {
      interface IStorageItemAccessList;
      interface IStorageApplicationPermissionsStatics;
      interface IStorageItemMostRecentlyUsedList;
      interface AccessListEntryView; // runtimeclass
    }
  }
}

namespace Windows {
  namespace Storage {
    namespace AccessCache {
      typedef enum AccessCacheOptions {
        AccessCacheOptions_None = 0x0,
        AccessCacheOptions_DisallowUserInput = 0x1,
        AccessCacheOptions_FastLocationsOnly = 0x2,
        AccessCacheOptions_UseReadOnlyCachedCopy = 0x4,
        AccessCacheOptions_SuppressAccessTimeUpdate = 0x8
      } AccessCacheOptions;

      [uuid(4391DFAA-D033-48F9-8060-3EC847D2E3F1)]
      interface IStorageApplicationPermissionsStatics : IInspectable
      {
          [propget] HRESULT FutureAccessList(IStorageItemAccessList** value);
          [propget] HRESULT MostRecentlyUsedList(IStorageItemMostRecentlyUsedList** value);
      }

      [uuid(016239D5-510D-411E-8CF1-C3D1EFFA4C33)]
      interface IStorageItemMostRecentlyUsedList : IInspectable
      // also IStorageItemAccessList
      {
          [local] HRESULT ItemRemoved(/*TypedEventHandler<StorageItemMostRecentlyUsedList*, ItemRemovedEventArgs*>*/void* handler, /*EventRegistrationToken* */ UINT64* token);
          HRESULT ItemRemoved(/*EventRegistrationToken*/ UINT64 token);
      }

      [uuid(2CAFF6AD-DE90-47F5-B2C3-DD36C9FDD453)]
      interface IStorageItemAccessList : IInspectable
      {
          HRESULT AddOverloadDefaultMetadata(Windows.Storage.IStorageItem* file, HSTRING* token);
          HRESULT Add(IStorageItem* file, HSTRING metadata, HSTRING* token);
          HRESULT AddOrReplaceOverloadDefaultMetadata(HSTRING token, IStorageItem* file);
          HRESULT AddOrReplace(HSTRING token, IStorageItem* file, HSTRING metadata);
          HRESULT GetItemAsync(HSTRING token, /*IAsyncOperation<IStorageItem*>*/IInspectable** operation);
          HRESULT GetFileAsync(HSTRING token, /*IAsyncOperation<IStorageFile*>*/IInspectable** operation);
          HRESULT GetFolderAsync(HSTRING token, /*IAsyncOperation<IStorageFolder*>*/IInspectable** operation);
          HRESULT GetItemWithOptionsAsync(HSTRING token, AccessCacheOptions options, /*IAsyncOperation<IStorageItem*>*/IInspectable** operation);
          HRESULT GetFileWithOptionsAsync(HSTRING token, AccessCacheOptions options, /*IAsyncOperation<IStorageFile*>*/IInspectable** operation);
          HRESULT GetFolderWithOptionsAsync(HSTRING token, AccessCacheOptions options, /*IAsyncOperation<IStorageFolder*>*/IInspectable** operation);
          HRESULT Remove(HSTRING token);
          HRESULT ContainsItem(HSTRING token, boolean* value);
          HRESULT Clear();
          HRESULT CheckAccess(IStorageItem* file, boolean* value);
          [propget] HRESULT Entries(/*AccessListEntryView** */ IUnknown** entries);
          [propget] HRESULT MaximumItemsAllowed(UINT32* value);
      }
    }
  }
}
